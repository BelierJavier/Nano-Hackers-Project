
<!DOCTYPE html>
<html>
  <head>

    <link href="https://fonts.googleapis.com/css?family=Black+Han+Sans" rel="stylesheet">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        position: fixed;
        height: 100%;
        width: 65%;
        -webkit-box-shadow: 7px -1px 36px 0px rgba(0,0,0,0.75);
        -moz-box-shadow: 7px -1px 36px 0px rgba(0,0,0,0.75);
        box-shadow: 7px -1px 36px 0px rgba(0,0,0,0.75);
      }
            #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
                position: relative;
        border:5px solid #222B39;
        background-color: #222B39;
        margin-top: 5%;
        border-radius:30px;
        height: 22px;
        width: 85%;
        color: white;
        outline: none;
        font-size: 17px;
        -o-transition:.5s ease-in-out;
        -ms-transition:.5s ease-in-out;
        -moz-transition:.5s ease-in-out;
        -webkit-transition:.5s ease-in-out;
        text-overflow: ellipsis;
        
      }
            #pac-input:hover { 
    	background-color: white;
    	border-color: white;
    	color:#222B39;
        -o-transition:.5s ease-in-out;
        -ms-transition:.5s ease-in-out;
        -moz-transition:.5s ease-in-out;
        -webkit-transition:.5s ease-in-out;
      }
      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
      #stats{
        position: absolute;
        width:35%;
        left:65%;
      }
      #stab{
        position: relative;
        border:10px solid #222B39;
        background-color: #222B39;
        margin-top: 5%;
        border-radius:30px;
        height: 22px;
        width: 85%;
        color: white;
        outline: none;
        font-size: 17px;
        -o-transition:.5s ease-in-out;
        -ms-transition:.5s ease-in-out;
        -moz-transition:.5s ease-in-out;
        -webkit-transition:.5s ease-in-out;
      }
      #stab:hover { 
    	background-color: white;
    	border-color: white;
    	color:#222B39;
        -o-transition:.5s ease-in-out;
        -ms-transition:.5s ease-in-out;
        -moz-transition:.5s ease-in-out;
        -webkit-transition:.5s ease-in-out;
      }
      #bird{
      	height:40%;
      	width:40%;
      }

      #name1{
        margin-top: -10px;
        position:relative;
        color: white; 
        font-family:'Black Han Sans', sans-serif;
        font-size: 32px;
      }
      #name2{
      	float: right;
      	position:absolute;
      	color:white; 
        font-family:'Black Han Sans', sans-serif;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #01ABEE;

      }
    </style>
  </head>
  <body>
      <div id= "stats">
        <br>
        <center><span style="display: inline-block;"id="name1">tweet</span></center>
        <center><span style="display: inline-block;"id="name2">Catcher</span></center>
        <br>
        <center><input id="pac-input" class="controls" type="text" placeholder="Search Box"></center>
        <center><img src="twitter-flying-bird-for-website.jpg" alt="Twitter Bird" id="bird"></img></center>
      </div>
    <div id="map"></div>
<<<<<<< HEAD
=======
        
    <div id="map"></div>
>>>>>>> b36b950bbe03f2098edeab503d121c5f4870fb77
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('stab');
        var searchBox = new google.maps.places.SearchBox(input);
        

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script>
      // Note: This example requires that you consent to location sharing when
      // prompted by your browser. If you see the error "The Geolocation service
      // failed.", it means you probably did not give permission for the browser to
      // locate you.
      var map, infoWindow;
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -34.397, lng: 150.644},
          zoom: 18 
        });
        infoWindow = new google.maps.InfoWindow;

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            infoWindow.setPosition(pos);
            infoWindow.setContent('You');
            infoWindow.open(map);
            map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }
      }

      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCrNqS8WD8Ph3HefudRwU9etn5DJmvcVZc&callback=initMap">
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCrNqS8WD8Ph3HefudRwU9etn5DJmvcVZc&libraries=places&callback=initAutocomplete"
         async defer></script>
  </body>
</html>
